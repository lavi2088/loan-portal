{"version":3,"sources":["webpack:///./src/app/layout/new-loan-application/new-loan-application.component.html","webpack:///./src/app/layout/new-loan-application/new-loan-application-routing.module.ts","webpack:///./src/app/layout/new-loan-application/new-loan-application.component.scss","webpack:///./src/app/layout/new-loan-application/new-loan-application.component.ts","webpack:///./src/app/layout/new-loan-application/new-loan-application.module.ts","webpack:///./src/app/shared/services/http.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,gtBAAgtB,+CAA+C,6PAA6P,uKAAuK,0iBAA0iB,yKAAyK,yfAAyf,2IAA2I,gZAAgZ,mJAAmJ,8YAA8Y,mLAAmL,wfAAwf,yJAAyJ,sbAAsb,iKAAiK,yeAAye,uMAAuM,kfAAkf,+MAA+M,2gBAA2gB,0J;;;;;;;;;;;;;;;;;;;;ACAzpN;AACkC;AACpB;AACwB;AAE/E,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,2FAA2B;KACjD;CACF,CAAC;AAMF,IAAa,+BAA+B,GAA5C,MAAa,+BAA+B;CAAI;AAAnC,+BAA+B;IAJ3C,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,0DAAW,CAAC;QACrD,OAAO,EAAE,CAAE,4DAAY,CAAC;KACzB,CAAC;GACW,+BAA+B,CAAI;AAAJ;;;;;;;;;;;;ACf5C,+DAA+D,2L;;;;;;;;;;;;;;;;;;;;;ACAb;AACO;AAC+B;AAErB;AAE1B;AAMzC,IAAa,2BAA2B,GAAxC,MAAa,2BAA2B;IAGtC,YAAoB,UAAmB,EAAU,WAAwB,EAAU,MAAc;QAA7E,eAAU,GAAV,UAAU,CAAS;QAAU,gBAAW,GAAX,WAAW,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAC/F,iCAAiC;QACjC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAC,IAAI,wDAAS,CAAC;YAC1B,SAAS,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;SACjC,CAAC,CAAC;IACH,CAAC;IAED,QAAQ;IACR,CAAC;IAED,QAAQ,CAAC,IAAI;QACX,IAAG,IAAI,CAAC,KAAK,EAAE;YACb,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBAC3D,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;gBAC5C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,EAAE,WAAW,EAAE,EAAC,IAAI,EAAE,IAAI,CAAC,eAAe,EAAC,EAAC,CAAC,CAAC;YAEvF,CAAC,EAAC,KAAK,GAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAC,KAAK,CAAC,CAAC,CAAC;SACxC;IACH,CAAC;CACF;;YArBiC,sEAAO;YAAuB,gFAAW;YAAkB,sDAAM;;AAHtF,2BAA2B;IALvC,+DAAS,CAAC;QACT,QAAQ,EAAE,0BAA0B;QACpC,qMAAoD;;KAErD,CAAC;2EAIgC,sEAAO,EAAuB,gFAAW,EAAkB,sDAAM;GAHtF,2BAA2B,CAwBvC;AAxBuC;;;;;;;;;;;;;;;;;;;;;;;ACZC;AACM;AAEF;AAE2C;AACT;AACtB;AAoBzD,IAAa,wBAAwB,GAArC,MAAa,wBAAwB;CAAI;AAA5B,wBAAwB;IAhBpC,8DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,2FAA2B;SAC5B;QACD,OAAO,EAAE;YACP,4DAAY;YACZ,0DAAW;YACX,oGAA+B;SAChC;QACD,SAAS,EAAE;YACT,sEAAO;SACR;QACD,OAAO,EAAE;YACP,0DAAW;SACZ;KACF,CAAC;GACW,wBAAwB,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;AC3BM;AACoB;AAM/D,IAAa,WAAW,GAAxB,MAAa,WAAW;IAKtB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAH1C,eAAe;QACf,gBAAW,GAAG,EAAE,CAAC;QAGf,uGAAuG;QACvG,4FAA4F;QAC5F,IAAI,CAAC,OAAO,GAAG,0EAA0E,CAAC;QAC1F,IAAI,CAAC,WAAW,GAAG;YACjB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,cAAc,EAAE,kBAAkB;gBAClC,6BAA6B,EAAE,GAAG;aACnC,CAAC;SACH;IACH,CAAC;IAED,WAAW,CAAC,UAAU;QAEpB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAC,oCAAoC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/H,CAAC;IAED,sBAAsB,CAAC,UAAU;QAE/B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAE,wBAAwB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACpH,CAAC;IAED,6BAA6B,CAAC,UAAU;QAEtC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAE,sCAAsC,GAAG,UAAU,CAAC,CAAC;IAChG,CAAC;IAED,wBAAwB,CAAC,UAAU;QAEjC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAC,iCAAiC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5H,CAAC;CACF;;YA/BiC,+DAAU;;AAL/B,WAAW;IAHvB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;2EAMgC,+DAAU;GAL/B,WAAW,CAoCvB;AApCuB","file":"new-loan-application-new-loan-application-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"container\\\">\\n  <!-- <h3>New Loan Application</h3>\\n  <hr /> -->\\n  <!-- <form (ngSubmit)=\\\"f.form.valid && submitBtn(f)\\\" #f=\\\"ngForm\\\" autocomplete=\\\"off\\\" novalidate> -->\\n  <div class=\\\"col col-md-8 loan-container\\\">\\n    <div class=\\\"loan-title\\\">New Loan Application</div>\\n    <div class=\\\"loan-body p-10\\\">\\n    <form novalidate (ngSubmit)=\\\"onSubmit(f)\\\" #f=\\\"ngForm\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm\\\">\\n        <div class=\\\"form-group\\\">\\n          <!-- <label>First Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newLoanObj.firstName\\\" name=\\\"firstName\\\" #firsName=\\\"ngModel\\\" placeholder=\\\"Enter First Name\\\" [ngClass]=\\\"{'is-invalid': f.submitted && firstName.invalid}\\\" autocomplete=\\\"off\\\" required>\\n        <div *ngIf=\\\"firstName.touched\\\" class=\\\"invalidInput\\\">\\n          <div *ngIf=\\\"firstName.errors?.required\\\">FirstName is required</div>\\n        </div> -->\\n\\n          <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n        'has-danger': firstName.invalid && (firstName.dirty || firstName.touched),\\n        'has-success': firstName.valid && (firstName.dirty || firstName.touched)}\\\">\\n            <label>First Name</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" [(ngModel)]=\\\"newLoanObj.firstName\\\" required\\n              #firstName=\\\"ngModel\\\">\\n            <div class=\\\"text-danger\\\"\\n              *ngIf=\\\"firstName.errors && (firstName.dirty || firstName.touched)\\\">\\n              <p *ngIf=\\\"firstName.errors.required\\\">First name is required</p>\\n            </div>\\n          </div>\\n\\n\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n            'has-danger': lastName.invalid && (lastName.dirty || lastName.touched),\\n            'has-success': lastName.valid && (lastName.dirty || lastName.touched)}\\\">\\n            <label>Last Name</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" [(ngModel)]=\\\"newLoanObj.lastName\\\" required\\n              #lastName=\\\"ngModel\\\">\\n            <div class=\\\"text-danger\\\"\\n              *ngIf=\\\"lastName.errors && (lastName.dirty || lastName.touched)\\\">\\n              <p *ngIf=\\\"lastName.errors.required\\\">Last name is required</p>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n            'has-danger': ssn.invalid && (ssn.dirty || ssn.touched),\\n            'has-success': ssn.valid && (ssn.dirty || ssn.touched)}\\\">\\n          <label>SSN</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"ssn\\\" [(ngModel)]=\\\"newLoanObj.SSN\\\" required #ssn=\\\"ngModel\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"ssn.errors && (ssn.dirty || ssn.touched)\\\">\\n            <p *ngIf=\\\"ssn.errors.required\\\">SSN is required</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n                'has-danger': age.invalid && (age.dirty || age.touched),\\n                'has-success': age.valid && (age.dirty || age.touched)}\\\">\\n          <label>Age</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"age\\\" [(ngModel)]=\\\"newLoanObj.age\\\" required #age=\\\"ngModel\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"age.errors && (age.dirty || age.touched)\\\">\\n            <p *ngIf=\\\"age.errors.required\\\">Age is required</p>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n                    'has-danger': address.invalid && (address.dirty || address.touched),\\n                    'has-success': address.valid && (address.dirty || address.touched)}\\\">\\n          <label>Address</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"address\\\" [(ngModel)]=\\\"newLoanObj.address\\\" required\\n            #address=\\\"ngModel\\\">\\n          <div class=\\\"text-danger\\\"\\n            *ngIf=\\\"address.errors && (address.dirty || address.touched)\\\">\\n            <p *ngIf=\\\"address.errors.required\\\">Address is required</p>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-sm\\\">\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n          'has-danger': income.invalid && (income.dirty || income.touched),\\n          'has-success': income.valid && (income.dirty || income.touched)}\\\">\\n          <label>Income</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"income\\\" [(ngModel)]=\\\"newLoanObj.income\\\" required\\n            #income=\\\"ngModel\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"income.errors && (income.dirty || income.touched)\\\">\\n            <p *ngIf=\\\"income.errors.required\\\">Income is required</p>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n              'has-danger': income.invalid && (income.dirty || income.touched),\\n              'has-success': income.valid && (income.dirty || income.touched)}\\\">\\n          <label>Loan Amount</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"loanAmount\\\" [(ngModel)]=\\\"newLoanObj.loanAmount\\\" required\\n            #loanAmount=\\\"ngModel\\\">\\n          <div class=\\\"text-danger\\\"\\n            *ngIf=\\\"loanAmount.errors && (loanAmount.dirty || loanAmount.touched)\\\">\\n            <p *ngIf=\\\"loanAmount.errors.required\\\">Loan amount is required</p>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n                  'has-danger': creditScore.invalid && (creditScore.dirty || creditScore.touched),\\n                  'has-success': creditScore.valid && (creditScore.dirty || creditScore.touched)}\\\">\\n          <label>Credit Score</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"creditScore\\\" [(ngModel)]=\\\"newLoanObj.creditScore\\\" required\\n            #creditScore=\\\"ngModel\\\">\\n          <div class=\\\"text-danger\\\"\\n            *ngIf=\\\"creditScore.errors && (creditScore.dirty || creditScore.touched)\\\">\\n            <p *ngIf=\\\"creditScore.errors.required\\\">Credit Score is required</p>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{\\n                      'has-danger': creditScore.invalid && (creditScore.dirty || creditScore.touched),\\n                      'has-success': creditScore.valid && (creditScore.dirty || creditScore.touched)}\\\">\\n          <label>Email</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"email\\\" [(ngModel)]=\\\"newLoanObj.email\\\" required #email=\\\"ngModel\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"email.errors && (email.dirty || email.touched)\\\">\\n            <p *ngIf=\\\"email.errors.required\\\">Email is required</p>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary float-left\\\" [disabled]=\\\"f.invalid\\\">Submit</button> &nbsp;\\n          <span><button class=\\\"btn btn-danger\\\">Reset</button></span>\\n        </div>\\n      </div>\\n    </div>\\n  </form>\\n  </div>\\n</div>\\n</div>\\n\"","import { NgModule } from '@angular/core';\nimport {FormGroup, ReactiveFormsModule, FormsModule} from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NewLoanApplicationComponent } from './new-loan-application.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: NewLoanApplicationComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes), FormsModule],\n  exports: [ RouterModule]\n})\nexport class NewLoanApplicationRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC9uZXctbG9hbi1hcHBsaWNhdGlvbi9uZXctbG9hbi1hcHBsaWNhdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NewLoan } from 'src/app/shared/models/new-loan';\nimport {FormGroup, ReactiveFormsModule, FormsModule, FormControl} from '@angular/forms';\nimport { from } from 'rxjs';\nimport { HttpService } from 'src/app/shared/services/http.service';\nimport { routerTransition } from 'src/app/router.animations';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-new-loan-application',\n  templateUrl: './new-loan-application.component.html',\n  styleUrls: ['./new-loan-application.component.scss']\n})\nexport class NewLoanApplicationComponent implements OnInit {\n  loanForm: FormGroup;\n  decisonResponse: {};\n  constructor( public newLoanObj: NewLoan, private httpService: HttpService, private router: Router) {\n    //this.newLoanObj.firstName = \"\";\n    this.newLoanObj.userId = \"test123\";\n    this.loanForm=new FormGroup({\n      firstName: new FormControl('')\n  });\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit(form) {\n    if(form.valid) {\n      this.httpService.getDecision(this.newLoanObj).subscribe(data => {\n          console.log(\"Loan Approval Response\", data);\n          this.decisonResponse = data;\n          this.router.navigate(['loanstatus'], { queryParams: {data: this.decisonResponse}});\n\n      },error=> console.log(\"Error:\",error));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbCarouselModule, NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FormsModule } from '@angular/forms';\n\nimport { NewLoanApplicationRoutingModule } from './new-loan-application-routing.module';\nimport { NewLoanApplicationComponent } from './new-loan-application.component';\nimport { NewLoan } from 'src/app/shared/models/new-loan';\n\n\n\n@NgModule({\n  declarations: [\n    NewLoanApplicationComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    NewLoanApplicationRoutingModule\n  ],\n  providers: [\n    NewLoan\n  ],\n  exports: [\n    FormsModule\n  ]\n})\nexport class NewLoanApplicationModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n  baseUrl: string;\n  // Http Options\n  httpOptions = {};\n\n  constructor(private httpClient: HttpClient) {\n    //this.baseUrl = \"http://drools-springboot-msk-sample.apps.us-west-2.online-starter.openshift.com/api\";\n    //this.baseUrl = 'http://camunda-apii-camunda-api.b9ad.pro-us-east-1.openshiftapps.com/API';\n    this.baseUrl = 'http://camunda-cors-camunda.b9ad.pro-us-east-1.openshiftapps.com/API/bpm';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-control-allow-origin': '*'\n      })\n    }\n  }\n\n  getDecision(inputParam): Observable<any> {\n\n    return this.httpClient.post(this.baseUrl+`/loanApproval/process/startProcess`, JSON.stringify(inputParam), this.httpOptions);\n  }\n\n  getAllLoanApplications(inputParam): Observable<any> {\n\n    return this.httpClient.post(this.baseUrl +`/allApplicationDetails`, JSON.stringify(inputParam), this.httpOptions);\n  }\n\n  getAllLoanApplicationsForUser(inputParam): Observable<any> {\n\n    return this.httpClient.get(this.baseUrl +`/allApplicationDetailsByUser?userId=` + inputParam);\n  }\n\n  completeLoanApplications(inputParam): Observable<any> {\n\n    return this.httpClient.post(this.baseUrl+`/loanApproval/task/completeTask`, JSON.stringify(inputParam), this.httpOptions);\n  }\n}\n"],"sourceRoot":""}